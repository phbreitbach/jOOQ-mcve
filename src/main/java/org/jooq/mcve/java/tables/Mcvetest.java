/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables;


import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.Keys;
import org.jooq.mcve.java.Mcve;
import org.jooq.mcve.java.tables.records.McvetestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mcvetest extends TableImpl<McvetestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.MCVETEST</code>
     */
    public static final Mcvetest MCVETEST = new Mcvetest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<McvetestRecord> getRecordType() {
        return McvetestRecord.class;
    }

    /**
     * The column <code>MCVE.MCVETEST.ID</code>.
     */
    public final TableField<McvetestRecord, BigDecimal> ID = createField(DSL.name("ID"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>MCVE.MCVETEST.VALUE</code>.
     */
    public final TableField<McvetestRecord, String> VALUE = createField(DSL.name("VALUE"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>MCVE.MCVETEST.FEHLERTEXT</code>.
     */
    public final TableField<McvetestRecord, String> FEHLERTEXT = createField(DSL.name("FEHLERTEXT"), SQLDataType.VARCHAR(240), this, "");

    /**
     * The column <code>MCVE.MCVETEST.SOMEDATE</code>.
     */
    public final TableField<McvetestRecord, LocalDate> SOMEDATE = createField(DSL.name("SOMEDATE"), SQLDataType.LOCALDATE, this, "");

    private Mcvetest(Name alias, Table<McvetestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mcvetest(Name alias, Table<McvetestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MCVE.MCVETEST</code> table reference
     */
    public Mcvetest(String alias) {
        this(DSL.name(alias), MCVETEST);
    }

    /**
     * Create an aliased <code>MCVE.MCVETEST</code> table reference
     */
    public Mcvetest(Name alias) {
        this(alias, MCVETEST);
    }

    /**
     * Create a <code>MCVE.MCVETEST</code> table reference
     */
    public Mcvetest() {
        this(DSL.name("MCVETEST"), null);
    }

    public <O extends Record> Mcvetest(Table<O> child, ForeignKey<O, McvetestRecord> key) {
        super(child, key, MCVETEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<McvetestRecord> getPrimaryKey() {
        return Keys.PK_TEST;
    }

    @Override
    public Mcvetest as(String alias) {
        return new Mcvetest(DSL.name(alias), this);
    }

    @Override
    public Mcvetest as(Name alias) {
        return new Mcvetest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mcvetest rename(String name) {
        return new Mcvetest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mcvetest rename(Name name) {
        return new Mcvetest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigDecimal, String, String, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
