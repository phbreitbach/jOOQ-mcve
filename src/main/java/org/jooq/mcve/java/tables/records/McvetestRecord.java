/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.tables.records;


import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.tables.Mcvetest;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class McvetestRecord extends UpdatableRecordImpl<McvetestRecord> implements Record4<BigDecimal, String, String, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>MCVE.MCVETEST.ID</code>.
     */
    public void setId(BigDecimal value) {
        set(0, value);
    }

    /**
     * Getter for <code>MCVE.MCVETEST.ID</code>.
     */
    public BigDecimal getId() {
        return (BigDecimal) get(0);
    }

    /**
     * Setter for <code>MCVE.MCVETEST.VALUE</code>.
     */
    public void setValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>MCVE.MCVETEST.VALUE</code>.
     */
    public String getValue() {
        return (String) get(1);
    }

    /**
     * Setter for <code>MCVE.MCVETEST.FEHLERTEXT</code>.
     */
    public void setFehlertext(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>MCVE.MCVETEST.FEHLERTEXT</code>.
     */
    public String getFehlertext() {
        return (String) get(2);
    }

    /**
     * Setter for <code>MCVE.MCVETEST.SOMEDATE</code>.
     */
    public void setSomedate(LocalDate value) {
        set(3, value);
    }

    /**
     * Getter for <code>MCVE.MCVETEST.SOMEDATE</code>.
     */
    public LocalDate getSomedate() {
        return (LocalDate) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<BigDecimal> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<BigDecimal, String, String, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<BigDecimal, String, String, LocalDate> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<BigDecimal> field1() {
        return Mcvetest.MCVETEST.ID;
    }

    @Override
    public Field<String> field2() {
        return Mcvetest.MCVETEST.VALUE;
    }

    @Override
    public Field<String> field3() {
        return Mcvetest.MCVETEST.FEHLERTEXT;
    }

    @Override
    public Field<LocalDate> field4() {
        return Mcvetest.MCVETEST.SOMEDATE;
    }

    @Override
    public BigDecimal component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getValue();
    }

    @Override
    public String component3() {
        return getFehlertext();
    }

    @Override
    public LocalDate component4() {
        return getSomedate();
    }

    @Override
    public BigDecimal value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getValue();
    }

    @Override
    public String value3() {
        return getFehlertext();
    }

    @Override
    public LocalDate value4() {
        return getSomedate();
    }

    @Override
    public McvetestRecord value1(BigDecimal value) {
        setId(value);
        return this;
    }

    @Override
    public McvetestRecord value2(String value) {
        setValue(value);
        return this;
    }

    @Override
    public McvetestRecord value3(String value) {
        setFehlertext(value);
        return this;
    }

    @Override
    public McvetestRecord value4(LocalDate value) {
        setSomedate(value);
        return this;
    }

    @Override
    public McvetestRecord values(BigDecimal value1, String value2, String value3, LocalDate value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached McvetestRecord
     */
    public McvetestRecord() {
        super(Mcvetest.MCVETEST);
    }

    /**
     * Create a detached, initialised McvetestRecord
     */
    public McvetestRecord(BigDecimal id, String value, String fehlertext, LocalDate somedate) {
        super(Mcvetest.MCVETEST);

        setId(id);
        setValue(value);
        setFehlertext(fehlertext);
        setSomedate(somedate);
    }
}
